# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,76,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,4,8,59,8,8,
        11,8,12,8,60,1,9,4,9,64,8,9,11,9,12,9,65,1,10,1,10,1,10,1,10,1,11,
        4,11,73,8,11,11,11,12,11,74,0,0,12,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,1,0,4,2,0,10,10,13,13,1,0,48,57,3,0,
        9,10,13,13,32,32,2,0,65,90,97,122,78,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,1,25,1,
        0,0,0,3,32,1,0,0,0,5,38,1,0,0,0,7,40,1,0,0,0,9,42,1,0,0,0,11,44,
        1,0,0,0,13,46,1,0,0,0,15,53,1,0,0,0,17,58,1,0,0,0,19,63,1,0,0,0,
        21,67,1,0,0,0,23,72,1,0,0,0,25,26,5,67,0,0,26,27,5,82,0,0,27,28,
        5,69,0,0,28,29,5,65,0,0,29,30,5,84,0,0,30,31,5,69,0,0,31,2,1,0,0,
        0,32,33,5,116,0,0,33,34,5,97,0,0,34,35,5,98,0,0,35,36,5,108,0,0,
        36,37,5,101,0,0,37,4,1,0,0,0,38,39,5,40,0,0,39,6,1,0,0,0,40,41,5,
        41,0,0,41,8,1,0,0,0,42,43,5,44,0,0,43,10,1,0,0,0,44,45,5,58,0,0,
        45,12,1,0,0,0,46,47,5,115,0,0,47,48,5,116,0,0,48,49,5,114,0,0,49,
        50,5,105,0,0,50,51,5,110,0,0,51,52,5,103,0,0,52,14,1,0,0,0,53,54,
        5,105,0,0,54,55,5,110,0,0,55,56,5,116,0,0,56,16,1,0,0,0,57,59,7,
        0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,0,0,0,60,61,1,0,0,0,61,
        18,1,0,0,0,62,64,7,1,0,0,63,62,1,0,0,0,64,65,1,0,0,0,65,63,1,0,0,
        0,65,66,1,0,0,0,66,20,1,0,0,0,67,68,7,2,0,0,68,69,1,0,0,0,69,70,
        6,10,0,0,70,22,1,0,0,0,71,73,7,3,0,0,72,71,1,0,0,0,73,74,1,0,0,0,
        74,72,1,0,0,0,74,75,1,0,0,0,75,24,1,0,0,0,4,0,60,65,74,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    NEWLINE = 9
    INT = 10
    WS = 11
    ID = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CREATE'", "'table'", "'('", "')'", "','", "':'", "'string'", 
            "'int'" ]

    symbolicNames = [ "<INVALID>",
            "NEWLINE", "INT", "WS", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "NEWLINE", "INT", "WS", "ID" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


