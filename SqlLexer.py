# Generated from Sql.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,31,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,1,1,1,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,3,16,
        139,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        3,17,152,8,17,1,18,1,18,1,18,1,18,1,18,3,18,159,8,18,1,19,1,19,1,
        19,1,19,1,19,1,19,3,19,167,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,5,26,186,8,
        26,10,26,12,26,189,9,26,1,27,4,27,192,8,27,11,27,12,27,193,1,28,
        1,28,5,28,198,8,28,10,28,12,28,201,9,28,1,28,1,28,1,29,1,29,1,29,
        1,29,5,29,209,8,29,10,29,12,29,212,9,29,1,29,1,29,1,30,1,30,1,30,
        1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,6,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,10,
        10,34,34,2,0,10,10,13,13,3,0,9,10,13,13,32,32,231,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,
        1,0,0,0,3,65,1,0,0,0,5,72,1,0,0,0,7,78,1,0,0,0,9,80,1,0,0,0,11,82,
        1,0,0,0,13,84,1,0,0,0,15,86,1,0,0,0,17,93,1,0,0,0,19,97,1,0,0,0,
        21,104,1,0,0,0,23,109,1,0,0,0,25,116,1,0,0,0,27,121,1,0,0,0,29,127,
        1,0,0,0,31,129,1,0,0,0,33,138,1,0,0,0,35,151,1,0,0,0,37,158,1,0,
        0,0,39,166,1,0,0,0,41,168,1,0,0,0,43,170,1,0,0,0,45,172,1,0,0,0,
        47,174,1,0,0,0,49,177,1,0,0,0,51,180,1,0,0,0,53,183,1,0,0,0,55,191,
        1,0,0,0,57,195,1,0,0,0,59,204,1,0,0,0,61,215,1,0,0,0,63,64,5,59,
        0,0,64,2,1,0,0,0,65,66,5,67,0,0,66,67,5,82,0,0,67,68,5,69,0,0,68,
        69,5,65,0,0,69,70,5,84,0,0,70,71,5,69,0,0,71,4,1,0,0,0,72,73,5,116,
        0,0,73,74,5,97,0,0,74,75,5,98,0,0,75,76,5,108,0,0,76,77,5,101,0,
        0,77,6,1,0,0,0,78,79,5,40,0,0,79,8,1,0,0,0,80,81,5,41,0,0,81,10,
        1,0,0,0,82,83,5,44,0,0,83,12,1,0,0,0,84,85,5,58,0,0,85,14,1,0,0,
        0,86,87,5,115,0,0,87,88,5,116,0,0,88,89,5,114,0,0,89,90,5,105,0,
        0,90,91,5,110,0,0,91,92,5,103,0,0,92,16,1,0,0,0,93,94,5,105,0,0,
        94,95,5,110,0,0,95,96,5,116,0,0,96,18,1,0,0,0,97,98,5,73,0,0,98,
        99,5,78,0,0,99,100,5,83,0,0,100,101,5,69,0,0,101,102,5,82,0,0,102,
        103,5,84,0,0,103,20,1,0,0,0,104,105,5,73,0,0,105,106,5,78,0,0,106,
        107,5,84,0,0,107,108,5,79,0,0,108,22,1,0,0,0,109,110,5,83,0,0,110,
        111,5,69,0,0,111,112,5,76,0,0,112,113,5,69,0,0,113,114,5,67,0,0,
        114,115,5,84,0,0,115,24,1,0,0,0,116,117,5,70,0,0,117,118,5,82,0,
        0,118,119,5,79,0,0,119,120,5,77,0,0,120,26,1,0,0,0,121,122,5,87,
        0,0,122,123,5,72,0,0,123,124,5,69,0,0,124,125,5,82,0,0,125,126,5,
        69,0,0,126,28,1,0,0,0,127,128,5,42,0,0,128,30,1,0,0,0,129,130,5,
        68,0,0,130,131,5,69,0,0,131,132,5,76,0,0,132,133,5,69,0,0,133,134,
        5,84,0,0,134,135,5,69,0,0,135,32,1,0,0,0,136,139,3,55,27,0,137,139,
        3,57,28,0,138,136,1,0,0,0,138,137,1,0,0,0,139,34,1,0,0,0,140,141,
        5,77,0,0,141,142,5,73,0,0,142,152,5,78,0,0,143,144,5,77,0,0,144,
        145,5,65,0,0,145,152,5,88,0,0,146,147,5,67,0,0,147,148,5,79,0,0,
        148,149,5,85,0,0,149,150,5,78,0,0,150,152,5,84,0,0,151,140,1,0,0,
        0,151,143,1,0,0,0,151,146,1,0,0,0,152,36,1,0,0,0,153,154,5,79,0,
        0,154,159,5,82,0,0,155,156,5,65,0,0,156,157,5,78,0,0,157,159,5,68,
        0,0,158,153,1,0,0,0,158,155,1,0,0,0,159,38,1,0,0,0,160,167,3,41,
        20,0,161,167,3,43,21,0,162,167,3,45,22,0,163,167,3,47,23,0,164,167,
        3,49,24,0,165,167,3,51,25,0,166,160,1,0,0,0,166,161,1,0,0,0,166,
        162,1,0,0,0,166,163,1,0,0,0,166,164,1,0,0,0,166,165,1,0,0,0,167,
        40,1,0,0,0,168,169,5,61,0,0,169,42,1,0,0,0,170,171,5,62,0,0,171,
        44,1,0,0,0,172,173,5,60,0,0,173,46,1,0,0,0,174,175,5,62,0,0,175,
        176,5,61,0,0,176,48,1,0,0,0,177,178,5,60,0,0,178,179,5,61,0,0,179,
        50,1,0,0,0,180,181,5,33,0,0,181,182,5,61,0,0,182,52,1,0,0,0,183,
        187,7,0,0,0,184,186,7,1,0,0,185,184,1,0,0,0,186,189,1,0,0,0,187,
        185,1,0,0,0,187,188,1,0,0,0,188,54,1,0,0,0,189,187,1,0,0,0,190,192,
        7,2,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,
        1,0,0,0,194,56,1,0,0,0,195,199,5,34,0,0,196,198,8,3,0,0,197,196,
        1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,
        1,0,0,0,201,199,1,0,0,0,202,203,5,34,0,0,203,58,1,0,0,0,204,205,
        5,47,0,0,205,206,5,47,0,0,206,210,1,0,0,0,207,209,8,4,0,0,208,207,
        1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,
        1,0,0,0,212,210,1,0,0,0,213,214,6,29,0,0,214,60,1,0,0,0,215,216,
        7,5,0,0,216,217,1,0,0,0,217,218,6,30,1,0,218,62,1,0,0,0,9,0,138,
        151,158,166,187,193,199,210,2,6,0,0,0,1,0
    ]

class SqlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    VAL = 17
    MINMAX = 18
    LOP = 19
    OP = 20
    EQ = 21
    GR = 22
    LS = 23
    GEQ = 24
    LEQ = 25
    NEQ = 26
    ID = 27
    INT = 28
    STRING = 29
    COMMENT = 30
    WS = 31

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'CREATE'", "'table'", "'('", "')'", "','", "':'", "'string'", 
            "'int'", "'INSERT'", "'INTO'", "'SELECT'", "'FROM'", "'WHERE'", 
            "'*'", "'DELETE'", "'='", "'>'", "'<'", "'>='", "'<='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "VAL", "MINMAX", "LOP", "OP", "EQ", "GR", "LS", "GEQ", "LEQ", 
            "NEQ", "ID", "INT", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "VAL", "MINMAX", "LOP", "OP", "EQ", 
                  "GR", "LS", "GEQ", "LEQ", "NEQ", "ID", "INT", "STRING", 
                  "COMMENT", "WS" ]

    grammarFileName = "Sql.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


