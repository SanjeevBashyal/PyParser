# Generated from Expr.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,181,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,5,14,115,8,14,10,14,12,14,118,9,14,1,14,3,14,121,8,14,1,15,
        4,15,124,8,15,11,15,12,15,125,1,16,1,16,1,16,1,16,1,16,1,16,3,16,
        134,8,16,1,16,5,16,137,8,16,10,16,12,16,140,9,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,154,8,17,1,18,
        1,18,1,18,1,18,1,18,3,18,161,8,18,1,19,4,19,164,8,19,11,19,12,19,
        165,1,20,4,20,169,8,20,11,20,12,20,170,1,21,4,21,174,8,21,11,21,
        12,21,175,1,22,1,22,1,22,1,22,0,0,23,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,1,0,5,2,0,65,90,97,122,2,0,60,60,62,
        62,2,0,10,10,13,13,1,0,48,57,3,0,9,10,13,13,32,32,193,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,1,47,1,0,0,0,3,49,1,0,0,0,5,56,1,0,0,0,7,
        62,1,0,0,0,9,64,1,0,0,0,11,66,1,0,0,0,13,68,1,0,0,0,15,70,1,0,0,
        0,17,77,1,0,0,0,19,81,1,0,0,0,21,88,1,0,0,0,23,93,1,0,0,0,25,99,
        1,0,0,0,27,106,1,0,0,0,29,120,1,0,0,0,31,123,1,0,0,0,33,127,1,0,
        0,0,35,153,1,0,0,0,37,160,1,0,0,0,39,163,1,0,0,0,41,168,1,0,0,0,
        43,173,1,0,0,0,45,177,1,0,0,0,47,48,5,59,0,0,48,2,1,0,0,0,49,50,
        5,67,0,0,50,51,5,82,0,0,51,52,5,69,0,0,52,53,5,65,0,0,53,54,5,84,
        0,0,54,55,5,69,0,0,55,4,1,0,0,0,56,57,5,116,0,0,57,58,5,97,0,0,58,
        59,5,98,0,0,59,60,5,108,0,0,60,61,5,101,0,0,61,6,1,0,0,0,62,63,5,
        40,0,0,63,8,1,0,0,0,64,65,5,41,0,0,65,10,1,0,0,0,66,67,5,44,0,0,
        67,12,1,0,0,0,68,69,5,58,0,0,69,14,1,0,0,0,70,71,5,115,0,0,71,72,
        5,116,0,0,72,73,5,114,0,0,73,74,5,105,0,0,74,75,5,110,0,0,75,76,
        5,103,0,0,76,16,1,0,0,0,77,78,5,105,0,0,78,79,5,110,0,0,79,80,5,
        116,0,0,80,18,1,0,0,0,81,82,5,83,0,0,82,83,5,69,0,0,83,84,5,76,0,
        0,84,85,5,69,0,0,85,86,5,67,0,0,86,87,5,84,0,0,87,20,1,0,0,0,88,
        89,5,70,0,0,89,90,5,82,0,0,90,91,5,79,0,0,91,92,5,77,0,0,92,22,1,
        0,0,0,93,94,5,87,0,0,94,95,5,72,0,0,95,96,5,69,0,0,96,97,5,82,0,
        0,97,98,5,69,0,0,98,24,1,0,0,0,99,100,5,73,0,0,100,101,5,78,0,0,
        101,102,5,83,0,0,102,103,5,69,0,0,103,104,5,82,0,0,104,105,5,84,
        0,0,105,26,1,0,0,0,106,107,5,73,0,0,107,108,5,78,0,0,108,109,5,84,
        0,0,109,110,5,79,0,0,110,28,1,0,0,0,111,116,3,31,15,0,112,113,5,
        44,0,0,113,115,3,31,15,0,114,112,1,0,0,0,115,118,1,0,0,0,116,114,
        1,0,0,0,116,117,1,0,0,0,117,121,1,0,0,0,118,116,1,0,0,0,119,121,
        5,42,0,0,120,111,1,0,0,0,120,119,1,0,0,0,121,30,1,0,0,0,122,124,
        7,0,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,123,1,0,0,0,125,126,
        1,0,0,0,126,32,1,0,0,0,127,138,3,35,17,0,128,129,5,79,0,0,129,134,
        5,82,0,0,130,131,5,65,0,0,131,132,5,78,0,0,132,134,5,68,0,0,133,
        128,1,0,0,0,133,130,1,0,0,0,134,135,1,0,0,0,135,137,3,35,17,0,136,
        133,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,
        34,1,0,0,0,140,138,1,0,0,0,141,142,3,31,15,0,142,143,5,61,0,0,143,
        154,1,0,0,0,144,154,7,1,0,0,145,146,5,60,0,0,146,154,5,61,0,0,147,
        148,5,62,0,0,148,154,5,61,0,0,149,150,5,33,0,0,150,151,5,61,0,0,
        151,152,1,0,0,0,152,154,3,37,18,0,153,141,1,0,0,0,153,144,1,0,0,
        0,153,145,1,0,0,0,153,147,1,0,0,0,153,149,1,0,0,0,154,36,1,0,0,0,
        155,161,3,41,20,0,156,157,5,34,0,0,157,158,3,43,21,0,158,159,5,34,
        0,0,159,161,1,0,0,0,160,155,1,0,0,0,160,156,1,0,0,0,161,38,1,0,0,
        0,162,164,7,2,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,0,
        0,165,166,1,0,0,0,166,40,1,0,0,0,167,169,7,3,0,0,168,167,1,0,0,0,
        169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,42,1,0,0,0,172,
        174,7,0,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,1,0,0,0,175,
        176,1,0,0,0,176,44,1,0,0,0,177,178,7,4,0,0,178,179,1,0,0,0,179,180,
        6,22,0,0,180,46,1,0,0,0,11,0,116,120,125,133,138,153,160,165,170,
        175,1,0,1,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    IDS = 15
    ID = 16
    CONDS = 17
    COND = 18
    VAL = 19
    NEWLINE = 20
    INT = 21
    STRING = 22
    WS = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'CREATE'", "'table'", "'('", "')'", "','", "':'", "'string'", 
            "'int'", "'SELECT'", "'FROM'", "'WHERE'", "'INSERT'", "'INTO'" ]

    symbolicNames = [ "<INVALID>",
            "IDS", "ID", "CONDS", "COND", "VAL", "NEWLINE", "INT", "STRING", 
            "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "IDS", "ID", "CONDS", "COND", "VAL", "NEWLINE", "INT", 
                  "STRING", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


